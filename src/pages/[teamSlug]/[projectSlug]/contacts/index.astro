---
import { z } from 'astro:schema'
import type { SQL } from 'drizzle-orm'

import ProjectLayout from '@/layouts/project/project-layout.astro'
import ProjectContactNav from '@/layouts/project/project-contact-nav.astro'

import { Badge } from '@/components/ui/badge'

import { ContactTable } from '@/components/contacts/contact-table'

import {
  getContactFields,
  batchContactResponse,
  buildContactConditions,
  type ContactColumnFilters,
  type ContactCustomColumnFilters,
} from '@/db/models/contact'
import { getFilterConditions, buildDynamicFilter } from '@/db/models/filter'

import { NewContactForm } from '@/components/contacts/new-contact-form'
import { snakeToCamel } from '@/lib/utils'
import {
  getSortingStateParser,
  getViewStateParser,
  getContactTabStateParser,
  getFilterStateParser,
  getGlobalFilterStateParser,
  serverPaginationPageStateParser,
  serverPaginationPageSizeStateParser,
  serverFilterIdStateParser,
} from '@/parsers/contacts-page'

import { ContactTabFilterEnum } from '@/enums'

const csrfToken = Astro.locals.csrfToken!
const team = Astro.locals.team!
const project = Astro.locals.project!

const ids = {
  teamId: team.id,
  projectId: project.id,
}

const contactFields = getContactFields()
const contactFieldNames = contactFields.map((f) => snakeToCamel(f.name))

const searchParams = Astro.url.searchParams
const params = {
  tab: getContactTabStateParser({ data: searchParams.get('tab'), z }),
  view: getViewStateParser({ data: searchParams.get('view'), contactFields, z }),
  sort: getSortingStateParser({ data: searchParams.get('sort'), contactFields, z }),
  filter: getFilterStateParser({ data: searchParams.get('filter'), contactFields, z }),
  search: getGlobalFilterStateParser({ data: searchParams.get('search'), z }),
  page: serverPaginationPageStateParser({ data: searchParams.get('page'), z }),
  pageSize: serverPaginationPageSizeStateParser({ data: searchParams.get('pageSize'), z }),
  filterId: serverFilterIdStateParser({ data: searchParams.get('segmentId'), z }),
}

const isAdvancedTabWithFilter =
  params.filterId && params.tab === ContactTabFilterEnum.ADVANCED_FILTER

const filterWhereConditions: (SQL<any> | undefined)[] = isAdvancedTabWithFilter
  ? [
      buildDynamicFilter({
        filterConditions: await getFilterConditions({ filterId: params.filterId }),
        contactFields,
        ...ids,
      }),
    ]
  : []

const { sortBy, whereConditions } = buildContactConditions({
  sortFields: params.sort.filter((s) => contactFieldNames.includes(s.id)),
  customFieldsSorting: params.sort.filter((s) => !contactFieldNames.includes(s.id)),
  columnFilters: params.filter.filter((s) =>
    contactFieldNames.includes(s.id)
  ) as ContactColumnFilters,
  customColumnFilters: params.filter.filter(
    (s) => !contactFieldNames.includes(s.id)
  ) as ContactCustomColumnFilters,
  globalFilter: params.search,
})
const { contacts, customFields, contactsTotal, filters, filterConditions } =
  await batchContactResponse({
    ...ids,
    filterId: params.filterId,
    contactsLimit: params.pageSize,
    contactsOffset: params.page * params.pageSize,
    contactsSortBy: sortBy,
    conditions: isAdvancedTabWithFilter ? filterWhereConditions : whereConditions,
  })
---

<ProjectLayout>
  <div class="container space-y-6">
    <div class="flex items-center justify-between">
      <div class="inline-flex items-center space-x-2">
        <h2 class="text-2xl font-bold tracking-tight">Contacts</h2>
        <Badge className="mt-0.5">{contactsTotal}</Badge>
      </div>
      <NewContactForm customFields={customFields} csrfToken={csrfToken} teamId={team.id} projectId={project.id} client:load />
    </div>
    <ProjectContactNav active="contacts">
      <ContactTable
        ids={ids}
        csrfToken={csrfToken}
        total={contactsTotal}
        data={contacts}
        className="pt-6"
        customFields={customFields}
        contactFields={contactFields}
        searchParams={params}
        filters={filters}
        filterConditions={filterConditions}
        client:load
      />
    </ProjectContactNav>
  </div>
</ProjectLayout>
